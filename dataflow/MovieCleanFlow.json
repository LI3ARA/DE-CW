{
	"name": "MovieCleanFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "IngestedDataCSV",
						"type": "DatasetReference"
					},
					"name": "MoviesData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputCSV",
						"type": "DatasetReference"
					},
					"name": "MoviesCleaned"
				},
				{
					"dataset": {
						"referenceName": "MoviesByYear",
						"type": "DatasetReference"
					},
					"name": "MoviesByYear"
				},
				{
					"dataset": {
						"referenceName": "MoviesByLanguage",
						"type": "DatasetReference"
					},
					"name": "MoviesByLanguage",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage2",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "YearExtraction"
				},
				{
					"name": "aggregateMoviesByYear",
					"description": "Get the sum of movies released in each year"
				},
				{
					"name": "aggregateByTheLanguage"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          title as string,",
				"          genres as string,",
				"          original_language as string,",
				"          overview as string,",
				"          popularity as string,",
				"          production_companies as string,",
				"          release_date as string,",
				"          budget as long,",
				"          revenue as long,",
				"          runtime as integer,",
				"          status as string,",
				"          tagline as string,",
				"          vote_average as float,",
				"          vote_count as integer,",
				"          credits as string,",
				"          keywords as string,",
				"          recommendations as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     maxColumns: 22) ~> MoviesData",
				"MoviesData derive(year = toInteger(trim(right(release_date,4)))) ~> YearExtraction",
				"YearExtraction aggregate(groupBy(year),",
				"     MoviesCount = count()) ~> aggregateMoviesByYear",
				"YearExtraction aggregate(groupBy(original_language),",
				"     numberOfMovies = count(),",
				"     partitionBy('hash', 1)) ~> aggregateByTheLanguage",
				"YearExtraction sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MoviesCleaned",
				"aggregateMoviesByYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MoviesByYear",
				"aggregateByTheLanguage sink(allowSchemaDrift: true,",
				"     validateSchema: false) ~> MoviesByLanguage"
			]
		}
	}
}